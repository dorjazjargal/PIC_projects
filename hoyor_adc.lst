CCS PCH C Compiler, Version 4.057, 53710               12-Jan-22 15:18

               Filename: D:\PIC_PROJECT\hoyor_adc.lst

               ROM used: 1028 bytes (3%)
                         Largest free fragment is 31736
               RAM used: 51 (3%) at main() level
                         56 (4%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  GOTO   01A2
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  F9D.5
004E:  GOTO   0058
0052:  BTFSC  F9E.5
0054:  GOTO   009E
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... #include "D:\PIC_PROJECT\hoyor_adc.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOOSCSEN              	//Oscillator switching is disabled, main oscillator is source 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
00AC:  CLRF   FEA
00AE:  MOVLW  33
00B0:  MOVWF  FE9
00B2:  MOVF   FEF,W
00B4:  BZ    00D0
00B6:  MOVLW  06
00B8:  MOVWF  01
00BA:  CLRF   00
00BC:  DECFSZ 00,F
00BE:  BRA    00BC
00C0:  DECFSZ 01,F
00C2:  BRA    00BA
00C4:  MOVLW  7B
00C6:  MOVWF  00
00C8:  DECFSZ 00,F
00CA:  BRA    00C8
00CC:  DECFSZ FEF,F
00CE:  BRA    00B6
00D0:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #byte port_d   =  0x0f83 
....................  
.................... int8 temp=0,i=0; 
.................... int16 a0=0,a1=0,a2=0,limit=0,a4=0; 
.................... int8 r0,r1,r2,r3=0; 
.................... int8 shifr[10]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39}; 
....................  
....................  
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... temp=getc(); 
*
009E:  BTFSS  F9E.5
00A0:  BRA    009E
00A2:  MOVFF  FAE,18
.................... } 
....................  
00A6:  BCF    F9E.5
00A8:  GOTO   0058
.................... int16 avg_adc(int8 times){ 
.................... a0=0; 
*
0114:  CLRF   1B
0116:  CLRF   1A
.................... if(times>=63){ 
0118:  MOVF   32,W
011A:  SUBLW  3E
011C:  BC    0122
.................... times=63; 
011E:  MOVLW  3F
0120:  MOVWF  32
.................... } 
.................... for(i=0;i<times;i++){ 
0122:  CLRF   19
0124:  MOVF   32,W
0126:  SUBWF  19,W
0128:  BC    0156
.................... set_adc_channel(0); 
012A:  MOVLW  00
012C:  MOVWF  01
012E:  MOVF   FC2,W
0130:  ANDLW  C7
0132:  IORWF  01,W
0134:  MOVWF  FC2
.................... delay_ms(100); 
0136:  MOVLW  64
0138:  MOVWF  33
013A:  RCALL  00AC
.................... a2=read_adc(); 
013C:  BSF    FC2.2
013E:  BTFSC  FC2.2
0140:  BRA    013E
0142:  MOVFF  FC3,1E
0146:  MOVFF  FC4,1F
.................... a0+=a2; 
014A:  MOVF   1E,W
014C:  ADDWF  1A,F
014E:  MOVF   1F,W
0150:  ADDWFC 1B,F
.................... } 
0152:  INCF   19,F
0154:  BRA    0124
.................... a0=a0/times; 
0156:  MOVFF  1B,34
015A:  MOVFF  1A,33
015E:  CLRF   36
0160:  MOVFF  32,35
0164:  RCALL  00D2
0166:  MOVFF  02,1B
016A:  MOVFF  01,1A
.................... return a0; 
016E:  MOVFF  1A,01
0172:  MOVFF  1B,02
.................... } 
0176:  GOTO   0284 (RETURN)
....................  
.................... void main() 
.................... { 
*
01A2:  CLRF   FF8
01A4:  BCF    FD0.7
01A6:  BSF    0D.7
01A8:  CLRF   FEA
01AA:  CLRF   FE9
01AC:  MOVLW  81
01AE:  MOVWF  FAF
01B0:  MOVLW  A6
01B2:  MOVWF  FAC
01B4:  MOVLW  90
01B6:  MOVWF  FAB
01B8:  BSF    FC1.0
01BA:  BSF    FC1.1
01BC:  BSF    FC1.2
01BE:  BCF    FC1.3
01C0:  CLRF   18
01C2:  CLRF   19
01C4:  CLRF   1A
01C6:  CLRF   1B
01C8:  CLRF   1C
01CA:  CLRF   1D
01CC:  CLRF   1E
01CE:  CLRF   1F
01D0:  CLRF   20
01D2:  CLRF   21
01D4:  CLRF   22
01D6:  CLRF   23
01D8:  CLRF   27
01DA:  MOVLW  30
01DC:  MOVWF  28
01DE:  MOVLW  31
01E0:  MOVWF  29
01E2:  MOVLW  32
01E4:  MOVWF  2A
01E6:  MOVLW  33
01E8:  MOVWF  2B
01EA:  MOVLW  34
01EC:  MOVWF  2C
01EE:  MOVLW  35
01F0:  MOVWF  2D
01F2:  MOVLW  36
01F4:  MOVWF  2E
01F6:  MOVLW  37
01F8:  MOVWF  2F
01FA:  MOVLW  38
01FC:  MOVWF  30
01FE:  MOVLW  39
0200:  MOVWF  31
....................  
....................    setup_adc_ports(AN0_AN1_AN3); 
0202:  BCF    FC1.0
0204:  BCF    FC1.1
0206:  BSF    FC1.2
0208:  BCF    FC1.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
020A:  BCF    FC1.6
020C:  BSF    FC2.6
020E:  BSF    FC2.7
0210:  BSF    FC1.7
0212:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0214:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0216:  BCF    FC6.5
0218:  BCF    F94.5
021A:  BSF    F94.4
021C:  BCF    F94.3
021E:  MOVLW  01
0220:  MOVWF  FC6
0222:  MOVLW  00
0224:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0226:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0228:  MOVLW  80
022A:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
022C:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
022E:  MOVLW  00
0230:  MOVWF  FCA
0232:  MOVLW  00
0234:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
0236:  MOVF   FB1,W
0238:  ANDLW  48
023A:  MOVWF  FB1
....................    enable_interrupts(INT_RDA); 
023C:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
023E:  MOVLW  C0
0240:  IORWF  FF2,F
.................... set_tris_a(0x0f); 
0242:  MOVLW  0F
0244:  MOVWF  F92
.................... set_tris_c(0x80); 
0246:  MOVLW  80
0248:  MOVWF  F94
.................... set_tris_d(0x00); 
024A:  MOVLW  00
024C:  MOVWF  F95
.................... port_d=0xff; 
024E:  MOVLW  FF
0250:  MOVWF  F83
.................... delay_ms(1500); 
0252:  MOVLW  06
0254:  MOVWF  32
0256:  MOVLW  FA
0258:  MOVWF  33
025A:  RCALL  00AC
025C:  DECFSZ 32,F
025E:  BRA    0256
.................... port_d=0; 
0260:  CLRF   F83
.................... delay_ms(800); 
0262:  MOVLW  04
0264:  MOVWF  32
0266:  MOVLW  C8
0268:  MOVWF  33
026A:  RCALL  00AC
026C:  DECFSZ 32,F
026E:  BRA    0266
.................... for(;;){ 
....................  
.................... delay_ms(1000); 
0270:  MOVLW  04
0272:  MOVWF  32
0274:  MOVLW  FA
0276:  MOVWF  33
0278:  RCALL  00AC
027A:  DECFSZ 32,F
027C:  BRA    0274
....................    avg_adc(20); 
027E:  MOVLW  14
0280:  MOVWF  32
0282:  BRA    0114
....................     
....................    set_adc_channel(1); 
0284:  MOVLW  08
0286:  MOVWF  01
0288:  MOVF   FC2,W
028A:  ANDLW  C7
028C:  IORWF  01,W
028E:  MOVWF  FC2
....................    delay_ms(1); 
0290:  MOVLW  01
0292:  MOVWF  33
0294:  RCALL  00AC
....................    a1=read_adc(); 
0296:  BSF    FC2.2
0298:  BTFSC  FC2.2
029A:  BRA    0298
029C:  MOVFF  FC3,1C
02A0:  MOVFF  FC4,1D
....................    a1=a1/5; 
02A4:  MOVFF  1D,34
02A8:  MOVFF  1C,33
02AC:  CLRF   36
02AE:  MOVLW  05
02B0:  MOVWF  35
02B2:  RCALL  00D2
02B4:  MOVFF  02,1D
02B8:  MOVFF  01,1C
....................     
....................    a4=a0; 
02BC:  MOVFF  1B,23
02C0:  MOVFF  1A,22
....................    a0=a0+a1; 
02C4:  MOVF   1C,W
02C6:  ADDWF  1A,F
02C8:  MOVF   1D,W
02CA:  ADDWFC 1B,F
....................     
....................    limit=550;  
02CC:  MOVLW  02
02CE:  MOVWF  21
02D0:  MOVLW  26
02D2:  MOVWF  20
....................     
....................    if(a0>=limit){ 
02D4:  MOVF   21,W
02D6:  SUBWF  1B,W
02D8:  BNC   02F2
02DA:  BNZ   02E2
02DC:  MOVF   20,W
02DE:  SUBWF  1A,W
02E0:  BNC   02F2
....................       port_d=0; 
02E2:  CLRF   F83
....................       delay_ms(10000); 
02E4:  MOVLW  28
02E6:  MOVWF  32
02E8:  MOVLW  FA
02EA:  MOVWF  33
02EC:  RCALL  00AC
02EE:  DECFSZ 32,F
02F0:  BRA    02E8
....................    } 
....................    if(a0<limit && a0>450){ 
02F2:  MOVF   1B,W
02F4:  SUBWF  21,W
02F6:  BNC   0322
02F8:  BNZ   0300
02FA:  MOVF   20,W
02FC:  SUBWF  1A,W
02FE:  BC    0322
0300:  MOVF   1B,W
0302:  SUBLW  00
0304:  BC    0322
0306:  XORLW  FF
0308:  BNZ   0310
030A:  MOVF   1A,W
030C:  SUBLW  C2
030E:  BC    0322
....................       port_d=0xff; 
0310:  MOVLW  FF
0312:  MOVWF  F83
....................       delay_ms(30000); 
0314:  MOVLW  78
0316:  MOVWF  32
0318:  MOVLW  FA
031A:  MOVWF  33
031C:  RCALL  00AC
031E:  DECFSZ 32,F
0320:  BRA    0318
....................    } 
....................    if(a0<=450 && a0>5){ 
0322:  MOVF   1B,W
0324:  SUBLW  01
0326:  BNC   033E
0328:  BNZ   0330
032A:  MOVF   1A,W
032C:  SUBLW  C2
032E:  BNC   033E
0330:  MOVF   1B,F
0332:  BNZ   033A
0334:  MOVF   1A,W
0336:  SUBLW  05
0338:  BC    033E
....................       port_d=0xff; 
033A:  MOVLW  FF
033C:  MOVWF  F83
....................    } 
....................     
....................    if(a4<5){// photo resistoriin hul tasarchihsan ued untarah tul 
033E:  MOVF   23,F
0340:  BNZ   034A
0342:  MOVF   22,W
0344:  SUBLW  04
0346:  BNC   034A
....................       port_d=0; 
0348:  CLRF   F83
....................    } 
....................     
.................... r2=a0/100; 
034A:  MOVFF  1B,34
034E:  MOVFF  1A,33
0352:  CLRF   36
0354:  MOVLW  64
0356:  MOVWF  35
0358:  RCALL  00D2
035A:  MOVFF  01,26
.................... r3=a0%100; 
035E:  MOVFF  1B,34
0362:  MOVFF  1A,33
0366:  CLRF   36
0368:  MOVLW  64
036A:  MOVWF  35
036C:  RCALL  00D2
036E:  MOVFF  00,27
.................... r1=r3/10; 
0372:  MOVFF  27,32
0376:  MOVLW  0A
0378:  MOVWF  33
037A:  RCALL  017A
037C:  MOVFF  01,25
.................... r0=r3%10; 
0380:  MOVFF  27,32
0384:  MOVLW  0A
0386:  MOVWF  33
0388:  RCALL  017A
038A:  MOVFF  00,24
.................... putc('a'); 
038E:  MOVLW  61
0390:  BTFSS  F9E.4
0392:  BRA    0390
0394:  MOVWF  FAD
.................... putc('d'); 
0396:  MOVLW  64
0398:  BTFSS  F9E.4
039A:  BRA    0398
039C:  MOVWF  FAD
.................... putc('c'); 
039E:  MOVLW  63
03A0:  BTFSS  F9E.4
03A2:  BRA    03A0
03A4:  MOVWF  FAD
.................... putc('='); 
03A6:  MOVLW  3D
03A8:  BTFSS  F9E.4
03AA:  BRA    03A8
03AC:  MOVWF  FAD
.................... putc(shifr[r2]); 
03AE:  CLRF   03
03B0:  MOVF   26,W
03B2:  ADDLW  28
03B4:  MOVWF  FE9
03B6:  MOVLW  00
03B8:  ADDWFC 03,W
03BA:  MOVWF  FEA
03BC:  MOVFF  FEF,32
03C0:  MOVF   32,W
03C2:  BTFSS  F9E.4
03C4:  BRA    03C2
03C6:  MOVWF  FAD
.................... putc(shifr[r1]); 
03C8:  CLRF   03
03CA:  MOVF   25,W
03CC:  ADDLW  28
03CE:  MOVWF  FE9
03D0:  MOVLW  00
03D2:  ADDWFC 03,W
03D4:  MOVWF  FEA
03D6:  MOVFF  FEF,32
03DA:  MOVF   32,W
03DC:  BTFSS  F9E.4
03DE:  BRA    03DC
03E0:  MOVWF  FAD
.................... putc(shifr[r0]); 
03E2:  CLRF   03
03E4:  MOVF   24,W
03E6:  ADDLW  28
03E8:  MOVWF  FE9
03EA:  MOVLW  00
03EC:  ADDWFC 03,W
03EE:  MOVWF  FEA
03F0:  MOVFF  FEF,32
03F4:  MOVF   32,W
03F6:  BTFSS  F9E.4
03F8:  BRA    03F6
03FA:  MOVWF  FAD
.................... putc(0x0d); 
03FC:  MOVLW  0D
03FE:  BTFSS  F9E.4
0400:  BRA    03FE
0402:  MOVWF  FAD
.................... } 
0404:  BRA    0270
.................... } 
0406:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0F   BROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB

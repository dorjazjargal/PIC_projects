CCS PCH C Compiler, Version 4.057, 53710               28-Dec-21 10:12

               Filename: D:\PIC_PROJECT\tsag2.lst

               ROM used: 1542 bytes (5%)
                         Largest free fragment is 31226
               RAM used: 37 (2%) at main() level
                         43 (3%) worst case
               Stack:    6 worst case (4 in main + 2 for interrupts)

*
0000:  GOTO   04F8
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  FF2.4
004E:  GOTO   0058
0052:  BTFSC  FF2.1
0054:  GOTO   009E
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... #include "D:\PIC_PROJECT\tsag2.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
019C:  CLRF   FEA
019E:  MOVLW  25
01A0:  MOVWF  FE9
01A2:  MOVF   FEF,W
01A4:  BZ    01C0
01A6:  MOVLW  06
01A8:  MOVWF  01
01AA:  CLRF   00
01AC:  DECFSZ 00,F
01AE:  BRA    01AC
01B0:  DECFSZ 01,F
01B2:  BRA    01AA
01B4:  MOVLW  7B
01B6:  MOVWF  00
01B8:  DECFSZ 00,F
01BA:  BRA    01B8
01BC:  DECFSZ FEF,F
01BE:  BRA    01A6
01C0:  RETLW  00
*
0310:  MOVLW  03
0312:  SUBWF  24,F
0314:  BNC   0328
0316:  CLRF   FEA
0318:  MOVLW  24
031A:  MOVWF  FE9
031C:  MOVF   FEF,W
031E:  BZ    0328
0320:  BRA    0324
0322:  BRA    0324
0324:  DECFSZ FEF,F
0326:  BRA    0322
0328:  GOTO   038C (RETURN)
.................... #use i2c(Master,Fast,sda=PIN_C4,scl=PIN_C3) 
*
00F6:  MOVLW  08
00F8:  MOVWF  01
00FA:  NOP   
00FC:  BCF    F8B.3
00FE:  BCF    F94.3
0100:  NOP   
0102:  RLCF   28,F
0104:  BCF    F8B.4
0106:  BTFSC  FD8.0
0108:  BSF    F94.4
010A:  BTFSS  FD8.0
010C:  BCF    F94.4
010E:  BSF    F94.3
0110:  BTFSS  F82.3
0112:  BRA    0110
0114:  DECFSZ 01,F
0116:  BRA    00FA
0118:  NOP   
011A:  BCF    F8B.3
011C:  BCF    F94.3
011E:  NOP   
0120:  BSF    F94.4
0122:  NOP   
0124:  NOP   
0126:  BSF    F94.3
0128:  BTFSS  F82.3
012A:  BRA    0128
012C:  CLRF   01
012E:  NOP   
0130:  BTFSC  F82.4
0132:  BSF    01.0
0134:  BCF    F8B.3
0136:  BCF    F94.3
0138:  BCF    F8B.4
013A:  BCF    F94.4
013C:  RETLW  00
*
01C2:  MOVLW  08
01C4:  MOVWF  25
01C6:  MOVFF  00,26
01CA:  BSF    F94.4
01CC:  NOP   
01CE:  BSF    F94.3
01D0:  BTFSS  F82.3
01D2:  BRA    01D0
01D4:  BTFSC  F82.4
01D6:  BSF    FD8.0
01D8:  BTFSS  F82.4
01DA:  BCF    FD8.0
01DC:  RLCF   01,F
01DE:  NOP   
01E0:  BCF    F94.3
01E2:  BCF    F8B.3
01E4:  DECFSZ 25,F
01E6:  BRA    01CA
01E8:  BSF    F94.4
01EA:  NOP   
01EC:  BCF    F8B.4
01EE:  MOVF   26,W
01F0:  BTFSS  FD8.2
01F2:  BCF    F94.4
01F4:  NOP   
01F6:  BSF    F94.3
01F8:  BTFSS  F82.3
01FA:  BRA    01F8
01FC:  NOP   
01FE:  BCF    F8B.3
0200:  BCF    F94.3
0202:  NOP   
0204:  BCF    F8B.4
0206:  BCF    F94.4
0208:  RETLW  00
....................  
....................  
.................... #byte port_e   =  0x0f84 
.................... #byte port_d   =  0x0f83 
.................... #byte port_b   =  0x0f81 
....................  
.................... int8 r0,a0=10,r1=0,mode=0; 
.................... int8 sec=0,min=0,hour=0,weekDay=0,date=0,month=0,year=0; 
.................... int1 b=1; 
.................... int1 setbit=0,hassan_sec=0,e0_bit=0,e1_bit=0; 
....................  
....................  
.................... void set_time0(int8 tsag, int8 minute, int8 sar, int8 udur) 
.................... { 
....................     I2C_Start();                          // Start I2C communication 
*
013E:  BSF    F94.4
0140:  NOP   
0142:  BSF    F94.3
0144:  NOP   
0146:  BCF    F8B.4
0148:  BCF    F94.4
014A:  NOP   
014C:  BCF    F8B.3
014E:  BCF    F94.3
....................   
....................     I2C_Write(0xd0);                   // connect to DS1307 by sending its ID on I2c Bus 
0150:  MOVLW  D0
0152:  MOVWF  28
0154:  RCALL  00F6
....................     I2C_Write(0x00);                   // Request sec RAM address at 00H 
0156:  CLRF   28
0158:  RCALL  00F6
....................   
....................     I2C_Write(0x50);                    // Write sec from RAM address 00H 
015A:  MOVLW  50
015C:  MOVWF  28
015E:  RCALL  00F6
....................     I2C_Write(0x59);                    // Write min from RAM address 01H 
0160:  MOVLW  59
0162:  MOVWF  28
0164:  RCALL  00F6
....................     I2C_Write(0x23);                    // Write hour from RAM address 02H 
0166:  MOVLW  23
0168:  MOVWF  28
016A:  RCALL  00F6
....................     I2C_Write(0x04);                   // Write weekDay on RAM address 03H 
016C:  MOVLW  04
016E:  MOVWF  28
0170:  RCALL  00F6
....................     I2C_Write(0x31);                    // Write date on RAM address 04H 
0172:  MOVLW  31
0174:  MOVWF  28
0176:  RCALL  00F6
....................     I2C_Write(0x12);                    // Write month on RAM address 05H 
0178:  MOVLW  12
017A:  MOVWF  28
017C:  RCALL  00F6
....................     I2C_Write(0x20);                    // Write year on RAM address 06h 
017E:  MOVLW  20
0180:  MOVWF  28
0182:  RCALL  00F6
....................   
....................     I2C_Stop();                              // Stop I2C communication after Setting the Date 
0184:  BCF    F94.4
0186:  NOP   
0188:  BSF    F94.3
018A:  BTFSS  F82.3
018C:  BRA    018A
018E:  NOP   
0190:  BRA    0192
0192:  NOP   
0194:  BSF    F94.4
0196:  NOP   
.................... } 
0198:  GOTO   0596 (RETURN)
....................  
....................  
.................... void rtc_getdate() 
.................... { 
....................     I2C_Start();                            // Start I2C communication 
*
020A:  BSF    F94.4
020C:  NOP   
020E:  BSF    F94.3
0210:  NOP   
0212:  BCF    F8B.4
0214:  BCF    F94.4
0216:  NOP   
0218:  BCF    F8B.3
021A:  BCF    F94.3
....................   
....................     I2C_Write(0xd0);                         // connect to DS1307 by sending its ID on I2c Bus 
021C:  MOVLW  D0
021E:  MOVWF  28
0220:  RCALL  00F6
....................     I2C_Write(0x00);                         // Request Sec RAM address at 00H 
0222:  CLRF   28
0224:  RCALL  00F6
....................   
....................     I2C_Stop();                                // Stop I2C communication after selecting Sec Register 
0226:  BCF    F94.4
0228:  NOP   
022A:  BSF    F94.3
022C:  BTFSS  F82.3
022E:  BRA    022C
0230:  NOP   
0232:  BRA    0234
0234:  NOP   
0236:  BSF    F94.4
0238:  NOP   
....................   
....................     I2C_Start();                            // Start I2C communication 
023A:  BSF    F94.4
023C:  NOP   
023E:  BSF    F94.3
0240:  NOP   
0242:  BCF    F8B.4
0244:  BCF    F94.4
0246:  NOP   
0248:  BCF    F8B.3
024A:  BCF    F94.3
....................     I2C_Write(0xd1);            // connect to DS1307(Read mode) by sending its ID 
024C:  MOVLW  D1
024E:  MOVWF  28
0250:  RCALL  00F6
....................   
....................     sec = I2C_Read(1);                // read second and return Positive ACK 
0252:  MOVLW  01
0254:  MOVWF  00
0256:  RCALL  01C2
0258:  MOVFF  01,1C
....................     min = I2C_Read(1);                 // read minute and return Positive ACK 
025C:  MOVLW  01
025E:  MOVWF  00
0260:  RCALL  01C2
0262:  MOVFF  01,1D
....................     hour= I2C_Read(1);               // read hour and return Negative/No ACK 
0266:  MOVLW  01
0268:  MOVWF  00
026A:  RCALL  01C2
026C:  MOVFF  01,1E
....................     weekDay = I2C_Read(1);           // read weekDay and return Positive ACK 
0270:  MOVLW  01
0272:  MOVWF  00
0274:  RCALL  01C2
0276:  MOVFF  01,1F
....................     date= I2C_Read(1);              // read Date and return Positive ACK 
027A:  MOVLW  01
027C:  MOVWF  00
027E:  RCALL  01C2
0280:  MOVFF  01,20
....................     month=I2C_Read(1);            // read Month and return Positive ACK 
0284:  MOVLW  01
0286:  MOVWF  00
0288:  RCALL  01C2
028A:  MOVFF  01,21
....................     year =I2C_Read(0);             // read Year and return Negative/No ACK 
028E:  CLRF   00
0290:  RCALL  01C2
0292:  MOVFF  01,22
....................   
....................     I2C_Stop();                              // Stop I2C communication after reading the Date 
0296:  BCF    F94.4
0298:  NOP   
029A:  BSF    F94.3
029C:  BTFSS  F82.3
029E:  BRA    029C
02A0:  NOP   
02A2:  BRA    02A4
02A4:  NOP   
02A6:  BSF    F94.4
02A8:  NOP   
.................... } 
02AA:  RETLW  00
....................  
.................... int8 set_bcd(int8 ival) 
....................  { 
....................     return ((ival / 10) << 4) | (ival % 10); 
*
0354:  MOVFF  24,27
0358:  MOVLW  0A
035A:  MOVWF  28
035C:  RCALL  032C
035E:  SWAPF  01,W
0360:  MOVWF  26
0362:  MOVLW  F0
0364:  ANDWF  26,F
0366:  MOVFF  24,27
036A:  MOVLW  0A
036C:  MOVWF  28
036E:  RCALL  032C
0370:  MOVF   00,W
0372:  IORWF  26,W
0374:  MOVWF  01
....................  } 
0376:  GOTO   03AE (RETURN)
....................   
....................   int8 readadc(){ 
....................        set_adc_channel(0); 
037A:  MOVLW  00
037C:  MOVWF  01
037E:  MOVF   FC2,W
0380:  ANDLW  C7
0382:  IORWF  01,W
0384:  MOVWF  FC2
....................        delay_us(250); 
0386:  MOVLW  FA
0388:  MOVWF  24
038A:  BRA    0310
....................        a0=read_adc(); 
038C:  BSF    FC2.2
038E:  BTFSC  FC2.2
0390:  BRA    038E
0392:  MOVFF  FC4,19
....................     
....................       if(a0>=3){ 
0396:  MOVF   19,W
0398:  SUBLW  02
039A:  BC    03A0
....................       a0=a0-3; 
039C:  MOVLW  03
039E:  SUBWF  19,F
....................       } 
....................        
....................       a0=a0/4; 
03A0:  RRCF   19,F
03A2:  RRCF   19,F
03A4:  MOVLW  3F
03A6:  ANDWF  19,F
....................       a0=set_bcd(a0); 
03A8:  MOVFF  19,24
03AC:  BRA    0354
03AE:  MOVFF  01,19
....................        
....................       return a0; 
03B2:  MOVFF  19,01
....................     
....................   } 
03B6:  RETLW  00
....................   
....................  void set_sec(){ 
....................  if(hassan_sec==1){ 
*
02AC:  BTFSS  23.2
02AE:  BRA    030C
....................  hassan_sec=0; 
02B0:  BCF    23.2
....................  delay_ms(30000); 
02B2:  MOVLW  78
02B4:  MOVWF  24
02B6:  MOVLW  FA
02B8:  MOVWF  25
02BA:  RCALL  019C
02BC:  DECFSZ 24,F
02BE:  BRA    02B6
....................  rtc_getdate(); 
02C0:  RCALL  020A
....................   I2C_Start();                          // Start I2C communication 
02C2:  BSF    F94.4
02C4:  NOP   
02C6:  BSF    F94.3
02C8:  NOP   
02CA:  BCF    F8B.4
02CC:  BCF    F94.4
02CE:  NOP   
02D0:  BCF    F8B.3
02D2:  BCF    F94.3
....................   
....................     I2C_Write(0xd0);                   // connect to DS1307 by sending its ID on I2c Bus 
02D4:  MOVLW  D0
02D6:  MOVWF  28
02D8:  RCALL  00F6
....................     I2C_Write(0x00);                   // Request sec RAM address at 00H 
02DA:  CLRF   28
02DC:  RCALL  00F6
....................     //port_d=sec; 
....................     sec=sec-0x15; 
02DE:  MOVLW  15
02E0:  SUBWF  1C,F
....................      
....................     if(sec<=0 && sec>=0x60){sec=0x00;port_d=3;} 
02E2:  MOVF   1C,F
02E4:  BNZ   02F2
02E6:  MOVF   1C,W
02E8:  SUBLW  5F
02EA:  BC    02F2
02EC:  CLRF   1C
02EE:  MOVLW  03
02F0:  MOVWF  F83
....................     I2C_Write(sec);                    // Write min from RAM address 01H 
02F2:  MOVFF  1C,28
02F6:  RCALL  00F6
....................     I2C_STOP(); 
02F8:  BCF    F94.4
02FA:  NOP   
02FC:  BSF    F94.3
02FE:  BTFSS  F82.3
0300:  BRA    02FE
0302:  NOP   
0304:  BRA    0306
0306:  NOP   
0308:  BSF    F94.4
030A:  NOP   
....................      
....................  } 
....................  } 
030C:  GOTO   05C4 (RETURN)
....................  void set_min(){ 
....................  r0=readadc(); 
*
04A8:  RCALL  037A
04AA:  MOVFF  01,18
....................  min=r0; 
04AE:  MOVFF  18,1D
....................  if(min>=0x60){min=0x59;} 
04B2:  MOVF   1D,W
04B4:  SUBLW  5F
04B6:  BC    04BC
04B8:  MOVLW  59
04BA:  MOVWF  1D
....................      I2C_Start();                          // Start I2C communication 
04BC:  BSF    F94.4
04BE:  NOP   
04C0:  BSF    F94.3
04C2:  NOP   
04C4:  BCF    F8B.4
04C6:  BCF    F94.4
04C8:  NOP   
04CA:  BCF    F8B.3
04CC:  BCF    F94.3
....................   
....................     I2C_Write(0xd0);                   // connect to DS1307 by sending its ID on I2c Bus 
04CE:  MOVLW  D0
04D0:  MOVWF  28
04D2:  RCALL  00F6
....................     I2C_Write(0x01);                   // Request minute RAM address at 01H 
04D4:  MOVLW  01
04D6:  MOVWF  28
04D8:  RCALL  00F6
....................   
....................     I2C_Write(min);                    // Write min from RAM address 01H 
04DA:  MOVFF  1D,28
04DE:  RCALL  00F6
....................     I2C_STOP(); 
04E0:  BCF    F94.4
04E2:  NOP   
04E4:  BSF    F94.3
04E6:  BTFSS  F82.3
04E8:  BRA    04E6
04EA:  NOP   
04EC:  BRA    04EE
04EE:  NOP   
04F0:  BSF    F94.4
04F2:  NOP   
....................  } 
04F4:  GOTO   0600 (RETURN)
....................  void set_tsag(){ 
....................  r0=readadc(); 
*
0458:  RCALL  037A
045A:  MOVFF  01,18
....................  hour=r0; 
045E:  MOVFF  18,1E
....................  if(hour>=0x24){hour=0x23;} 
0462:  MOVF   1E,W
0464:  SUBLW  23
0466:  BC    046C
0468:  MOVLW  23
046A:  MOVWF  1E
....................      I2C_Start();                          // Start I2C communication 
046C:  BSF    F94.4
046E:  NOP   
0470:  BSF    F94.3
0472:  NOP   
0474:  BCF    F8B.4
0476:  BCF    F94.4
0478:  NOP   
047A:  BCF    F8B.3
047C:  BCF    F94.3
....................   
....................     I2C_Write(0xd0);                   // connect to DS1307 by sending its ID on I2c Bus 
047E:  MOVLW  D0
0480:  MOVWF  28
0482:  RCALL  00F6
....................     I2C_Write(0x02);                   // Request hour RAM address at 02H 
0484:  MOVLW  02
0486:  MOVWF  28
0488:  RCALL  00F6
....................   
....................     I2C_Write(hour);                    // Write hour from RAM address 02H 
048A:  MOVFF  1E,28
048E:  RCALL  00F6
....................     I2C_STOP(); 
0490:  BCF    F94.4
0492:  NOP   
0494:  BSF    F94.3
0496:  BTFSS  F82.3
0498:  BRA    0496
049A:  NOP   
049C:  BRA    049E
049E:  NOP   
04A0:  BSF    F94.4
04A2:  NOP   
....................  } 
04A4:  GOTO   05F6 (RETURN)
....................  void set_sar(){ 
....................  r0=readadc(); 
*
03B8:  RCALL  037A
03BA:  MOVFF  01,18
....................  month=r0; 
03BE:  MOVFF  18,21
....................  if(month>=0x13){month=0x12;} 
03C2:  MOVF   21,W
03C4:  SUBLW  12
03C6:  BC    03CC
03C8:  MOVLW  12
03CA:  MOVWF  21
....................  I2C_Start();                          // Start I2C communication 
03CC:  BSF    F94.4
03CE:  NOP   
03D0:  BSF    F94.3
03D2:  NOP   
03D4:  BCF    F8B.4
03D6:  BCF    F94.4
03D8:  NOP   
03DA:  BCF    F8B.3
03DC:  BCF    F94.3
....................   
....................     I2C_Write(0xd0);                   // connect to DS1307 by sending its ID on I2c Bus 
03DE:  MOVLW  D0
03E0:  MOVWF  28
03E2:  RCALL  00F6
....................     I2C_Write(0x05);                   // Request hour RAM address at 02H 
03E4:  MOVLW  05
03E6:  MOVWF  28
03E8:  RCALL  00F6
....................   
....................     I2C_Write(month);                    // Write hour from RAM address 02H 
03EA:  MOVFF  21,28
03EE:  RCALL  00F6
....................     I2C_STOP(); 
03F0:  BCF    F94.4
03F2:  NOP   
03F4:  BSF    F94.3
03F6:  BTFSS  F82.3
03F8:  BRA    03F6
03FA:  NOP   
03FC:  BRA    03FE
03FE:  NOP   
0400:  BSF    F94.4
0402:  NOP   
....................  } 
0404:  GOTO   05E2 (RETURN)
....................  void set_udur(){ 
....................  r0=readadc(); 
0408:  RCALL  037A
040A:  MOVFF  01,18
....................  date=r0; 
040E:  MOVFF  18,20
....................  if(date>=0x32){date=0x31;} 
0412:  MOVF   20,W
0414:  SUBLW  31
0416:  BC    041C
0418:  MOVLW  31
041A:  MOVWF  20
....................  I2C_Start();                          // Start I2C communication 
041C:  BSF    F94.4
041E:  NOP   
0420:  BSF    F94.3
0422:  NOP   
0424:  BCF    F8B.4
0426:  BCF    F94.4
0428:  NOP   
042A:  BCF    F8B.3
042C:  BCF    F94.3
....................   
....................     I2C_Write(0xd0);                   // connect to DS1307 by sending its ID on I2c Bus 
042E:  MOVLW  D0
0430:  MOVWF  28
0432:  RCALL  00F6
....................     I2C_Write(0x04);                   // Request udur RAM address at 04H 
0434:  MOVLW  04
0436:  MOVWF  28
0438:  RCALL  00F6
....................   
....................     I2C_Write(date);                    // Write udur from RAM address 04H 
043A:  MOVFF  20,28
043E:  RCALL  00F6
....................     I2C_STOP(); 
0440:  BCF    F94.4
0442:  NOP   
0444:  BSF    F94.3
0446:  BTFSS  F82.3
0448:  BRA    0446
044A:  NOP   
044C:  BRA    044E
044E:  NOP   
0450:  BSF    F94.4
0452:  NOP   
....................      
....................  } 
0454:  GOTO   05EC (RETURN)
....................   
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
.................... setbit=bit_test(port_e,2); 
*
009E:  BCF    23.1
00A0:  BTFSC  F84.2
00A2:  BSF    23.1
.................... if(setbit==1){ 
00A4:  BTFSS  23.1
00A6:  BRA    00CE
.................... switch (port_e){ 
00A8:  MOVLW  04
00AA:  SUBWF  F84,W
00AC:  ADDLW  FC
00AE:  BC    00CE
00B0:  ADDLW  04
00B2:  GOTO   00D4
....................    case 4: mode=4;break; 
00B6:  MOVLW  04
00B8:  MOVWF  1B
00BA:  BRA    00CE
....................    case 5: mode=5;break; 
00BC:  MOVLW  05
00BE:  MOVWF  1B
00C0:  BRA    00CE
....................    case 6: mode=6;break; 
00C2:  MOVLW  06
00C4:  MOVWF  1B
00C6:  BRA    00CE
....................    case 7: mode=7;break; 
00C8:  MOVLW  07
00CA:  MOVWF  1B
00CC:  BRA    00CE
.................... } 
.................... } 
.................... } 
00CE:  BCF    FF2.1
00D0:  GOTO   0058
....................  void segment_ruu_gargah(int8 k0){ 
....................     
....................  } 
*
0004:  GOTO   05DA (RETURN)
.................... void main() 
.................... { 
*
04F8:  CLRF   FF8
04FA:  BCF    FD0.7
04FC:  BSF    0D.7
04FE:  CLRF   FEA
0500:  CLRF   FE9
0502:  BSF    FC1.0
0504:  BSF    FC1.1
0506:  BSF    FC1.2
0508:  BCF    FC1.3
050A:  MOVLW  0A
050C:  MOVWF  19
050E:  CLRF   1A
0510:  CLRF   1B
0512:  CLRF   1C
0514:  CLRF   1D
0516:  CLRF   1E
0518:  CLRF   1F
051A:  CLRF   20
051C:  CLRF   21
051E:  CLRF   22
0520:  BSF    23.0
0522:  BCF    23.1
0524:  BCF    23.2
0526:  BCF    23.3
0528:  BCF    23.4
....................  
....................    setup_adc_ports(RA0_ANALOG); 
052A:  BCF    FC1.0
052C:  BSF    FC1.1
052E:  BSF    FC1.2
0530:  BSF    FC1.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0532:  BCF    FC1.6
0534:  BSF    FC2.6
0536:  BSF    FC2.7
0538:  BCF    FC1.7
053A:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
053C:  BCF    F96.4
....................    setup_wdt(WDT_OFF); 
053E:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0540:  MOVLW  80
0542:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0544:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0546:  MOVLW  00
0548:  MOVWF  FCA
054A:  MOVLW  00
054C:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
054E:  MOVF   FB1,W
0550:  ANDLW  48
0552:  MOVWF  FB1
....................    enable_interrupts(INT_EXT); 
0554:  BSF    FF2.4
....................    enable_interrupts(GLOBAL); 
0556:  MOVLW  C0
0558:  IORWF  FF2,F
.................... set_tris_a(0x01); 
055A:  MOVLW  01
055C:  MOVWF  F92
.................... set_tris_e(0x00); 
055E:  BCF    F96.0
0560:  BCF    F96.1
0562:  BCF    F96.2
.................... set_tris_d(0x00); 
0564:  MOVLW  00
0566:  MOVWF  F95
.................... set_tris_b(0x01); 
0568:  MOVLW  01
056A:  MOVWF  F93
.................... set_tris_c(0x00); 
056C:  MOVLW  00
056E:  MOVWF  F94
.................... output_c(0x00); 
0570:  CLRF   F94
0572:  CLRF   F8B
.................... output_a(0x00); 
0574:  CLRF   F92
0576:  CLRF   F89
.................... output_b(0x00); 
0578:  CLRF   F93
057A:  CLRF   F8A
.................... output_d(0x00); 
057C:  CLRF   F95
057E:  CLRF   F8C
....................  
.................... for(;;){ 
....................    
.................... if(b==1){ 
0580:  BTFSS  23.0
0582:  BRA    05A6
.................... set_time0(0x09,0x15,0x10,0x01); 
0584:  MOVLW  09
0586:  MOVWF  24
0588:  MOVLW  15
058A:  MOVWF  25
058C:  MOVLW  10
058E:  MOVWF  26
0590:  MOVLW  01
0592:  MOVWF  27
0594:  BRA    013E
.................... b=0; 
0596:  BCF    23.0
.................... delay_ms(1500); 
0598:  MOVLW  06
059A:  MOVWF  24
059C:  MOVLW  FA
059E:  MOVWF  25
05A0:  RCALL  019C
05A2:  DECFSZ 24,F
05A4:  BRA    059C
.................... } 
.................... delay_ms(200); 
05A6:  MOVLW  C8
05A8:  MOVWF  25
05AA:  RCALL  019C
....................  
.................... if(hour==0x23 && min>=0x59 && sec>=0x57){hassan_sec=1;} 
05AC:  MOVF   1E,W
05AE:  SUBLW  23
05B0:  BNZ   05C0
05B2:  MOVF   1D,W
05B4:  SUBLW  58
05B6:  BC    05C0
05B8:  MOVF   1C,W
05BA:  SUBLW  56
05BC:  BTFSS  FD8.0
05BE:  BSF    23.2
.................... rtc_getdate(); 
05C0:  RCALL  020A
.................... set_sec(); 
05C2:  BRA    02AC
....................  
.................... setbit=bit_test(port_e,2); 
05C4:  BCF    23.1
05C6:  BTFSC  F84.2
05C8:  BSF    23.1
....................  
.................... if(setbit==1){ 
05CA:  BTFSS  23.1
05CC:  BRA    05DA
.................... r1=readadc(); 
05CE:  RCALL  037A
05D0:  MOVFF  01,1A
.................... segment_ruu_gargah(r1); 
05D4:  MOVFF  1A,24
05D8:  BRA    0004
.................... } 
....................  
.................... if(mode==4){set_sar(); mode=0;} 
05DA:  MOVF   1B,W
05DC:  SUBLW  04
05DE:  BNZ   05E4
05E0:  BRA    03B8
05E2:  CLRF   1B
.................... if(mode==5){set_udur(); mode=0;} 
05E4:  MOVF   1B,W
05E6:  SUBLW  05
05E8:  BNZ   05EE
05EA:  BRA    0408
05EC:  CLRF   1B
.................... if(mode==6){set_tsag(); mode=0;} 
05EE:  MOVF   1B,W
05F0:  SUBLW  06
05F2:  BNZ   05F8
05F4:  BRA    0458
05F6:  CLRF   1B
.................... if(mode==7){set_min(); mode=0;} 
05F8:  MOVF   1B,W
05FA:  SUBLW  07
05FC:  BNZ   0602
05FE:  BRA    04A8
0600:  CLRF   1B
....................  
.................... } 
0602:  BRA    0580
.................... } 
....................  
0604:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0F   BROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB

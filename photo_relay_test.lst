CCS PCH C Compiler, Version 4.057, 53710               13-Jan-22 10:28

               Filename: D:\PIC_PROJECT\photo_relay_test.lst

               ROM used: 1078 bytes (3%)
                         Largest free fragment is 31686
               RAM used: 48 (3%) at main() level
                         53 (3%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  GOTO   01A2
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  F9D.5
004E:  GOTO   0058
0052:  BTFSC  F9E.5
0054:  GOTO   009E
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... #include "D:\PIC_PROJECT\photo_relay_test.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOOSCSEN              	//Oscillator switching is disabled, main oscillator is source 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(clock=20000000) 
*
00AC:  CLRF   FEA
00AE:  MOVLW  30
00B0:  MOVWF  FE9
00B2:  MOVF   FEF,W
00B4:  BZ    00D0
00B6:  MOVLW  06
00B8:  MOVWF  01
00BA:  CLRF   00
00BC:  DECFSZ 00,F
00BE:  BRA    00BC
00C0:  DECFSZ 01,F
00C2:  BRA    00BA
00C4:  MOVLW  7B
00C6:  MOVWF  00
00C8:  DECFSZ 00,F
00CA:  BRA    00C8
00CC:  DECFSZ FEF,F
00CE:  BRA    00B6
00D0:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #byte port_b   =  0x0f81 
.................... #byte port_d   =  0x0f83 
.................... int16 a0=0,a1=0,a2=0; 
.................... int8 i=0,teden_udaa=0; 
.................... int8 temp,r0,r1,r2,r3=0; 
.................... int8 shifr[10]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39}; 
....................  
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... temp=getc(); 
*
009E:  BTFSS  F9E.5
00A0:  BRA    009E
00A2:  MOVFF  FAE,20
.................... } 
....................  
00A6:  BCF    F9E.5
00A8:  GOTO   0058
.................... int16 avg_adc(int8 times){ 
.................... a0=0; 
*
0114:  CLRF   19
0116:  CLRF   18
.................... if(times>=63){ 
0118:  MOVF   2F,W
011A:  SUBLW  3E
011C:  BC    0122
.................... times=63; 
011E:  MOVLW  3F
0120:  MOVWF  2F
.................... } 
.................... for(i=0;i<times;i++){ 
0122:  CLRF   1E
0124:  MOVF   2F,W
0126:  SUBWF  1E,W
0128:  BC    0156
.................... set_adc_channel(0); 
012A:  MOVLW  00
012C:  MOVWF  01
012E:  MOVF   FC2,W
0130:  ANDLW  C7
0132:  IORWF  01,W
0134:  MOVWF  FC2
.................... delay_ms(100); 
0136:  MOVLW  64
0138:  MOVWF  30
013A:  RCALL  00AC
.................... a1=read_adc(); 
013C:  BSF    FC2.2
013E:  BTFSC  FC2.2
0140:  BRA    013E
0142:  MOVFF  FC3,1A
0146:  MOVFF  FC4,1B
.................... a0+=a1; 
014A:  MOVF   1A,W
014C:  ADDWF  18,F
014E:  MOVF   1B,W
0150:  ADDWFC 19,F
.................... } 
0152:  INCF   1E,F
0154:  BRA    0124
.................... a0=a0/times; 
0156:  MOVFF  19,31
015A:  MOVFF  18,30
015E:  CLRF   33
0160:  MOVFF  2F,32
0164:  RCALL  00D2
0166:  MOVFF  02,19
016A:  MOVFF  01,18
.................... return a0; 
016E:  MOVFF  18,01
0172:  MOVFF  19,02
.................... } 
0176:  GOTO   0280 (RETURN)
....................  
....................  
....................  
.................... void main() 
.................... { 
*
01A2:  CLRF   FF8
01A4:  BCF    FD0.7
01A6:  BSF    0D.7
01A8:  CLRF   FEA
01AA:  CLRF   FE9
01AC:  MOVLW  81
01AE:  MOVWF  FAF
01B0:  MOVLW  A6
01B2:  MOVWF  FAC
01B4:  MOVLW  90
01B6:  MOVWF  FAB
01B8:  BSF    FC1.0
01BA:  BSF    FC1.1
01BC:  BSF    FC1.2
01BE:  BCF    FC1.3
01C0:  CLRF   18
01C2:  CLRF   19
01C4:  CLRF   1A
01C6:  CLRF   1B
01C8:  CLRF   1C
01CA:  CLRF   1D
01CC:  CLRF   1E
01CE:  CLRF   1F
01D0:  CLRF   24
01D2:  MOVLW  30
01D4:  MOVWF  25
01D6:  MOVLW  31
01D8:  MOVWF  26
01DA:  MOVLW  32
01DC:  MOVWF  27
01DE:  MOVLW  33
01E0:  MOVWF  28
01E2:  MOVLW  34
01E4:  MOVWF  29
01E6:  MOVLW  35
01E8:  MOVWF  2A
01EA:  MOVLW  36
01EC:  MOVWF  2B
01EE:  MOVLW  37
01F0:  MOVWF  2C
01F2:  MOVLW  38
01F4:  MOVWF  2D
01F6:  MOVLW  39
01F8:  MOVWF  2E
....................  
....................    //setup_adc_ports(RA0_ANALOG); 
....................    setup_adc_ports(AN0); 
01FA:  BCF    FC1.0
01FC:  BSF    FC1.1
01FE:  BSF    FC1.2
0200:  BSF    FC1.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0202:  BCF    FC1.6
0204:  BSF    FC2.6
0206:  BSF    FC2.7
0208:  BSF    FC1.7
020A:  BSF    FC2.0
....................     
....................    setup_psp(PSP_DISABLED); 
020C:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
020E:  BCF    FC6.5
0210:  BCF    F94.5
0212:  BSF    F94.4
0214:  BCF    F94.3
0216:  MOVLW  01
0218:  MOVWF  FC6
021A:  MOVLW  00
021C:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
021E:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0220:  MOVLW  80
0222:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0224:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0226:  MOVLW  00
0228:  MOVWF  FCA
022A:  MOVLW  00
022C:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
022E:  MOVF   FB1,W
0230:  ANDLW  48
0232:  MOVWF  FB1
....................    enable_interrupts(INT_RDA); 
0234:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
0236:  MOVLW  C0
0238:  IORWF  FF2,F
....................    output_a(0x00); 
023A:  CLRF   F92
023C:  CLRF   F89
.................... set_tris_c(0x80); 
023E:  MOVLW  80
0240:  MOVWF  F94
.................... set_tris_a(0x01); 
0242:  MOVLW  01
0244:  MOVWF  F92
.................... set_tris_d(0x00); 
0246:  MOVLW  00
0248:  MOVWF  F95
....................  
.................... output_d(0x00); 
024A:  CLRF   F95
024C:  CLRF   F8C
.................... port_b=0; 
024E:  CLRF   F81
....................  
.................... port_d=0xff; 
0250:  MOVLW  FF
0252:  MOVWF  F83
.................... delay_ms(1000); 
0254:  MOVLW  04
0256:  MOVWF  2F
0258:  MOVLW  FA
025A:  MOVWF  30
025C:  RCALL  00AC
025E:  DECFSZ 2F,F
0260:  BRA    0258
.................... port_d=0; 
0262:  CLRF   F83
.................... delay_ms(500); 
0264:  MOVLW  02
0266:  MOVWF  2F
0268:  MOVLW  FA
026A:  MOVWF  30
026C:  RCALL  00AC
026E:  DECFSZ 2F,F
0270:  BRA    0268
....................  
.................... teden_udaa=20; 
0272:  MOVLW  14
0274:  MOVWF  1F
....................  
.................... for(;;){ 
....................  
.................... a0=0; 
0276:  CLRF   19
0278:  CLRF   18
.................... a0=avg_adc(teden_udaa); 
027A:  MOVFF  1F,2F
027E:  BRA    0114
0280:  MOVFF  02,19
0284:  MOVFF  01,18
....................  
....................  
.................... if(a0>=860){ 
0288:  MOVF   19,W
028A:  SUBLW  02
028C:  BC    029A
028E:  XORLW  FF
0290:  BNZ   0298
0292:  MOVF   18,W
0294:  SUBLW  5B
0296:  BC    029A
.................... //off 
.................... port_d=0; 
0298:  CLRF   F83
.................... } 
.................... if(a0<=859 && a0>600){ 
029A:  MOVF   19,W
029C:  SUBLW  03
029E:  BNC   02BA
02A0:  BNZ   02A8
02A2:  MOVF   18,W
02A4:  SUBLW  5B
02A6:  BNC   02BA
02A8:  MOVF   19,W
02AA:  SUBLW  01
02AC:  BC    02BA
02AE:  XORLW  FF
02B0:  BNZ   02B8
02B2:  MOVF   18,W
02B4:  SUBLW  58
02B6:  BC    02BA
.................... port_d=0; 
02B8:  CLRF   F83
.................... } 
.................... /* 
.................... if(a0<=590 && a0>570){ 
.................... //on 
.................... port_d=0xff; 
.................... delay_ms(30000); 
.................... delay_ms(30000); 
.................... }*/ 
.................... if(a0<=570 && a0>5){ 
02BA:  MOVF   19,W
02BC:  SUBLW  02
02BE:  BNC   0300
02C0:  BNZ   02C8
02C2:  MOVF   18,W
02C4:  SUBLW  3A
02C6:  BNC   0300
02C8:  MOVF   19,F
02CA:  BNZ   02D2
02CC:  MOVF   18,W
02CE:  SUBLW  05
02D0:  BC    0300
.................... //on 
.................... port_d=0xff; 
02D2:  MOVLW  FF
02D4:  MOVWF  F83
.................... delay_ms(10000); 
02D6:  MOVLW  28
02D8:  MOVWF  2F
02DA:  MOVLW  FA
02DC:  MOVWF  30
02DE:  RCALL  00AC
02E0:  DECFSZ 2F,F
02E2:  BRA    02DA
.................... delay_ms(30000); 
02E4:  MOVLW  78
02E6:  MOVWF  2F
02E8:  MOVLW  FA
02EA:  MOVWF  30
02EC:  RCALL  00AC
02EE:  DECFSZ 2F,F
02F0:  BRA    02E8
.................... delay_ms(30000); 
02F2:  MOVLW  78
02F4:  MOVWF  2F
02F6:  MOVLW  FA
02F8:  MOVWF  30
02FA:  RCALL  00AC
02FC:  DECFSZ 2F,F
02FE:  BRA    02F6
.................... } 
.................... if(a0<=5){port_d=0;} 
0300:  MOVF   19,F
0302:  BNZ   030C
0304:  MOVF   18,W
0306:  SUBLW  05
0308:  BTFSC  FD8.0
030A:  CLRF   F83
.................... a2=a0; 
030C:  MOVFF  19,1D
0310:  MOVFF  18,1C
.................... if(a2>=1000){ 
0314:  MOVF   1D,W
0316:  SUBLW  02
0318:  BC    032C
031A:  XORLW  FF
031C:  BNZ   0324
031E:  MOVF   1C,W
0320:  SUBLW  E7
0322:  BC    032C
.................... a2=999; 
0324:  MOVLW  03
0326:  MOVWF  1D
0328:  MOVLW  E7
032A:  MOVWF  1C
.................... } 
.................... r2=a2/100; 
032C:  MOVFF  1D,31
0330:  MOVFF  1C,30
0334:  CLRF   33
0336:  MOVLW  64
0338:  MOVWF  32
033A:  RCALL  00D2
033C:  MOVFF  01,23
.................... r3=a2%100; 
0340:  MOVFF  1D,31
0344:  MOVFF  1C,30
0348:  CLRF   33
034A:  MOVLW  64
034C:  MOVWF  32
034E:  RCALL  00D2
0350:  MOVFF  00,24
.................... r1=r3/10; 
0354:  MOVFF  24,2F
0358:  MOVLW  0A
035A:  MOVWF  30
035C:  RCALL  017A
035E:  MOVFF  01,22
.................... r0=r3%10; 
0362:  MOVFF  24,2F
0366:  MOVLW  0A
0368:  MOVWF  30
036A:  RCALL  017A
036C:  MOVFF  00,21
.................... putc('a'); 
0370:  MOVLW  61
0372:  BTFSS  F9E.4
0374:  BRA    0372
0376:  MOVWF  FAD
.................... putc('d'); 
0378:  MOVLW  64
037A:  BTFSS  F9E.4
037C:  BRA    037A
037E:  MOVWF  FAD
.................... putc('c'); 
0380:  MOVLW  63
0382:  BTFSS  F9E.4
0384:  BRA    0382
0386:  MOVWF  FAD
.................... putc('='); 
0388:  MOVLW  3D
038A:  BTFSS  F9E.4
038C:  BRA    038A
038E:  MOVWF  FAD
.................... putc(shifr[r2]); 
0390:  CLRF   03
0392:  MOVF   23,W
0394:  ADDLW  25
0396:  MOVWF  FE9
0398:  MOVLW  00
039A:  ADDWFC 03,W
039C:  MOVWF  FEA
039E:  MOVFF  FEF,2F
03A2:  MOVF   2F,W
03A4:  BTFSS  F9E.4
03A6:  BRA    03A4
03A8:  MOVWF  FAD
.................... putc(shifr[r1]); 
03AA:  CLRF   03
03AC:  MOVF   22,W
03AE:  ADDLW  25
03B0:  MOVWF  FE9
03B2:  MOVLW  00
03B4:  ADDWFC 03,W
03B6:  MOVWF  FEA
03B8:  MOVFF  FEF,2F
03BC:  MOVF   2F,W
03BE:  BTFSS  F9E.4
03C0:  BRA    03BE
03C2:  MOVWF  FAD
.................... putc(shifr[r0]); 
03C4:  CLRF   03
03C6:  MOVF   21,W
03C8:  ADDLW  25
03CA:  MOVWF  FE9
03CC:  MOVLW  00
03CE:  ADDWFC 03,W
03D0:  MOVWF  FEA
03D2:  MOVFF  FEF,2F
03D6:  MOVF   2F,W
03D8:  BTFSS  F9E.4
03DA:  BRA    03D8
03DC:  MOVWF  FAD
.................... putc(0x0d); 
03DE:  MOVLW  0D
03E0:  BTFSS  F9E.4
03E2:  BRA    03E0
03E4:  MOVWF  FAD
.................... port_b=0; 
03E6:  CLRF   F81
.................... delay_ms(200); 
03E8:  MOVLW  C8
03EA:  MOVWF  30
03EC:  RCALL  00AC
.................... port_b=shifr[r2]; 
03EE:  CLRF   03
03F0:  MOVF   23,W
03F2:  ADDLW  25
03F4:  MOVWF  FE9
03F6:  MOVLW  00
03F8:  ADDWFC 03,W
03FA:  MOVWF  FEA
03FC:  MOVFF  FEF,F81
.................... delay_ms(200); 
0400:  MOVLW  C8
0402:  MOVWF  30
0404:  RCALL  00AC
.................... port_b=shifr[r1]; 
0406:  CLRF   03
0408:  MOVF   22,W
040A:  ADDLW  25
040C:  MOVWF  FE9
040E:  MOVLW  00
0410:  ADDWFC 03,W
0412:  MOVWF  FEA
0414:  MOVFF  FEF,F81
.................... delay_ms(200); 
0418:  MOVLW  C8
041A:  MOVWF  30
041C:  RCALL  00AC
.................... port_b=shifr[r0]; 
041E:  CLRF   03
0420:  MOVF   21,W
0422:  ADDLW  25
0424:  MOVWF  FE9
0426:  MOVLW  00
0428:  ADDWFC 03,W
042A:  MOVWF  FEA
042C:  MOVFF  FEF,F81
.................... delay_ms(200); 
0430:  MOVLW  C8
0432:  MOVWF  30
0434:  RCALL  00AC
....................  
.................... } 
0436:  BRA    0276
.................... } 
0438:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0F   BROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB

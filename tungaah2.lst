CCS PCH C Compiler, Version 4.057, 53710               17-Feb-22 08:12

               Filename: D:\PIC_PROJECT\tungaah2.lst

               ROM used: 762 bytes (2%)
                         Largest free fragment is 32002
               RAM used: 44 (3%) at main() level
                         49 (3%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  GOTO   0236
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  F9D.5
004E:  GOTO   0058
0052:  BTFSC  F9E.5
0054:  GOTO   00EA
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... #include "D:\PIC_PROJECT\tungaah2.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOOSCSEN                 //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=40000000) 
.................... #use rs232(baud=115200,parity=N,xmit=PIN_E1,rcv=PIN_E2,bits=8) 
*
009E:  BSF    F96.2
00A0:  BTFSC  F84.2
00A2:  BRA    00A0
00A4:  MOVLW  08
00A6:  MOVWF  00
00A8:  CLRF   30
00AA:  BSF    00.7
00AC:  BRA    00CE
00AE:  BCF    00.7
00B0:  BRA    00CE
00B2:  MOVFF  30,02
00B6:  BCF    FD8.0
00B8:  BTFSC  F84.2
00BA:  BSF    FD8.0
00BC:  RRCF   02,F
00BE:  BSF    00.6
00C0:  BRA    00CE
00C2:  BCF    00.6
00C4:  DECFSZ 00,F
00C6:  BRA    00B6
00C8:  MOVFF  02,01
00CC:  BRA    00E6
00CE:  MOVLW  16
00D0:  BTFSC  00.7
00D2:  MOVLW  06
00D4:  MOVWF  01
00D6:  DECFSZ 01,F
00D8:  BRA    00D6
00DA:  BRA    00DC
00DC:  BTFSC  00.7
00DE:  BRA    00AE
00E0:  BTFSC  00.6
00E2:  BRA    00C2
00E4:  BRA    00B6
00E6:  GOTO   00EC (RETURN)
*
011E:  BCF    F96.1
0120:  BCF    F8D.1
0122:  MOVLW  08
0124:  MOVWF  01
0126:  BRA    0128
0128:  NOP   
012A:  BSF    01.7
012C:  BRA    014A
012E:  BCF    01.7
0130:  RRCF   2E,F
0132:  BTFSC  FD8.0
0134:  BSF    F8D.1
0136:  BTFSS  FD8.0
0138:  BCF    F8D.1
013A:  BSF    01.6
013C:  BRA    014A
013E:  BCF    01.6
0140:  DECFSZ 01,F
0142:  BRA    0130
0144:  BRA    0146
0146:  NOP   
0148:  BSF    F8D.1
014A:  MOVLW  16
014C:  MOVWF  FE9
014E:  DECFSZ FE9,F
0150:  BRA    014E
0152:  BRA    0154
0154:  NOP   
0156:  BTFSC  01.7
0158:  BRA    012E
015A:  BTFSC  01.6
015C:  BRA    013E
015E:  RETLW  00
....................  
....................  
.................... #byte port_c   =  0x0f82 
.................... #byte port_b   =  0x0f81 
.................... #byte port_d   =  0x0f83 
.................... #byte port_e   =  0x0f84 
....................  
.................... int8 umnuh_c=0, umnuh_b=0, umnuh_d=0, umnuh_e=0, porta=0; 
.................... int8 ascii_number[10]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39}; 
....................  
.................... int8 temp,n1,n2,n3=0; 
....................  
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... temp=getc(); 
*
00EA:  BRA    009E
00EC:  MOVFF  01,27
.................... } 
....................  
....................  
00F0:  BCF    F9E.5
00F2:  GOTO   0058
.................... void convert_ascii(int8 port){ 
....................    if(port>=100){ 
*
0160:  MOVF   2C,W
0162:  SUBLW  63
0164:  BC    01E8
....................       n3=port/100; 
0166:  MOVFF  2C,2D
016A:  MOVLW  64
016C:  MOVWF  2E
016E:  RCALL  00F6
0170:  MOVFF  01,2A
....................       n2=port%100; 
0174:  MOVFF  2C,2D
0178:  MOVLW  64
017A:  MOVWF  2E
017C:  RCALL  00F6
017E:  MOVFF  00,29
....................       n2=n2/10; 
0182:  MOVFF  29,2D
0186:  MOVLW  0A
0188:  MOVWF  2E
018A:  RCALL  00F6
018C:  MOVFF  01,29
....................       n1=port%10; 
0190:  MOVFF  2C,2D
0194:  MOVLW  0A
0196:  MOVWF  2E
0198:  RCALL  00F6
019A:  MOVFF  00,28
....................        
....................       putc(ascii_number[n3]); 
019E:  CLRF   03
01A0:  MOVF   2A,W
01A2:  ADDLW  1D
01A4:  MOVWF  FE9
01A6:  MOVLW  00
01A8:  ADDWFC 03,W
01AA:  MOVWF  FEA
01AC:  MOVFF  FEF,2D
01B0:  MOVFF  2D,2E
01B4:  RCALL  011E
....................       putc(ascii_number[n2]); 
01B6:  CLRF   03
01B8:  MOVF   29,W
01BA:  ADDLW  1D
01BC:  MOVWF  FE9
01BE:  MOVLW  00
01C0:  ADDWFC 03,W
01C2:  MOVWF  FEA
01C4:  MOVFF  FEF,2D
01C8:  MOVFF  2D,2E
01CC:  RCALL  011E
....................       putc(ascii_number[n1]); 
01CE:  CLRF   03
01D0:  MOVF   28,W
01D2:  ADDLW  1D
01D4:  MOVWF  FE9
01D6:  MOVLW  00
01D8:  ADDWFC 03,W
01DA:  MOVWF  FEA
01DC:  MOVFF  FEF,2D
01E0:  MOVFF  2D,2E
01E4:  RCALL  011E
....................       
....................    } 
....................    else{ 
01E6:  BRA    0234
....................       n2=port/10; 
01E8:  MOVFF  2C,2D
01EC:  MOVLW  0A
01EE:  MOVWF  2E
01F0:  RCALL  00F6
01F2:  MOVFF  01,29
....................       n1=port%10; 
01F6:  MOVFF  2C,2D
01FA:  MOVLW  0A
01FC:  MOVWF  2E
01FE:  RCALL  00F6
0200:  MOVFF  00,28
....................        
....................       putc(ascii_number[n2]); 
0204:  CLRF   03
0206:  MOVF   29,W
0208:  ADDLW  1D
020A:  MOVWF  FE9
020C:  MOVLW  00
020E:  ADDWFC 03,W
0210:  MOVWF  FEA
0212:  MOVFF  FEF,2D
0216:  MOVFF  2D,2E
021A:  RCALL  011E
....................       putc(ascii_number[n1]); 
021C:  CLRF   03
021E:  MOVF   28,W
0220:  ADDLW  1D
0222:  MOVWF  FE9
0224:  MOVLW  00
0226:  ADDWFC 03,W
0228:  MOVWF  FEA
022A:  MOVFF  FEF,2D
022E:  MOVFF  2D,2E
0232:  RCALL  011E
....................        
....................    } 
....................     
.................... } 
0234:  RETLW  00
....................  
.................... void main() 
.................... { 
0236:  CLRF   FF8
0238:  BCF    FD0.7
023A:  BSF    0D.7
023C:  CLRF   FEA
023E:  CLRF   FE9
0240:  BCF    F96.1
0242:  BSF    F8D.1
0244:  BSF    FC1.0
0246:  BSF    FC1.1
0248:  BSF    FC1.2
024A:  BCF    FC1.3
024C:  CLRF   18
024E:  CLRF   19
0250:  CLRF   1A
0252:  CLRF   1B
0254:  CLRF   1C
0256:  MOVLW  30
0258:  MOVWF  1D
025A:  MOVLW  31
025C:  MOVWF  1E
025E:  MOVLW  32
0260:  MOVWF  1F
0262:  MOVLW  33
0264:  MOVWF  20
0266:  MOVLW  34
0268:  MOVWF  21
026A:  MOVLW  35
026C:  MOVWF  22
026E:  MOVLW  36
0270:  MOVWF  23
0272:  MOVLW  37
0274:  MOVWF  24
0276:  MOVLW  38
0278:  MOVWF  25
027A:  MOVLW  39
027C:  MOVWF  26
027E:  CLRF   2A
....................  
....................    setup_adc_ports(NO_ANALOGS); 
0280:  BSF    FC1.0
0282:  BSF    FC1.1
0284:  BSF    FC1.2
0286:  BCF    FC1.3
....................    setup_adc(ADC_OFF); 
0288:  BCF    FC2.0
....................    setup_psp(PSP_DISABLED); 
028A:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
028C:  BCF    FC6.5
028E:  BCF    F94.5
0290:  BSF    F94.4
0292:  BCF    F94.3
0294:  MOVLW  01
0296:  MOVWF  FC6
0298:  MOVLW  00
029A:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
029C:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
029E:  MOVLW  80
02A0:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
02A2:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
02A4:  MOVLW  00
02A6:  MOVWF  FCA
02A8:  MOVLW  00
02AA:  MOVWF  FCB
....................    enable_interrupts(INT_RDA); 
02AC:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
02AE:  MOVLW  C0
02B0:  IORWF  FF2,F
.................... set_tris_a(0x3f); 
02B2:  MOVLW  3F
02B4:  MOVWF  F92
.................... set_tris_b(0xff); 
02B6:  MOVLW  FF
02B8:  MOVWF  F93
.................... set_tris_c(0xff); 
02BA:  MOVWF  F94
.................... set_tris_d(0xff); 
02BC:  MOVWF  F95
.................... set_tris_e(0x04); 
02BE:  BCF    F96.0
02C0:  BCF    F96.1
02C2:  BSF    F96.2
....................  
.................... for(;;){ 
....................  
....................    //putc('b'); 
....................    convert_ascii(~port_b); 
02C4:  MOVFF  F81,2B
02C8:  COMF   2B,F
02CA:  MOVFF  2B,2C
02CE:  RCALL  0160
....................     
....................    putc(' '); 
02D0:  MOVLW  20
02D2:  MOVWF  2E
02D4:  RCALL  011E
....................    convert_ascii(~port_c); 
02D6:  MOVFF  F82,2B
02DA:  COMF   2B,F
02DC:  MOVFF  2B,2C
02E0:  RCALL  0160
....................     
....................    putc(' '); 
02E2:  MOVLW  20
02E4:  MOVWF  2E
02E6:  RCALL  011E
....................    convert_ascii(~port_d); 
02E8:  MOVFF  F83,2B
02EC:  COMF   2B,F
02EE:  MOVFF  2B,2C
02F2:  RCALL  0160
....................    putc(0x0d); 
02F4:  MOVLW  0D
02F6:  MOVWF  2E
02F8:  RCALL  011E
....................    /* 
....................    if(umnuh_b!=~port_b){ 
....................       putc('b'); 
....................       convert_ascii(~port_b); 
....................    } 
....................    umnuh_b=~port_b; 
....................     
....................     if(umnuh_d!=~port_d){ 
....................       putc('d'); 
....................       convert_ascii(port_d); 
....................        
....................    } 
....................    umnuh_d=~port_d; 
....................     
....................     
....................    if(umnuh_c!=~port_c){ 
....................       putc('c'); 
....................      // porta=port_a&0x3f; 
....................       convert_ascii(~port_c); 
....................       
....................    } 
....................    umnuh_c=~port_c; 
....................  */ 
.................... } 
02FA:  BRA    02C4
.................... } 
02FC:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0F   BROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
